/// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
///     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
/// Let us list the factors of the first seven triangle numbers:
///      1: 1
///      3: 1,3
///      6: 1,2,3,6
///     10: 1,2,5,10
///     15: 1,3,5,15
///     21: 1,3,7,21
///     28: 1,2,4,7,14,28
/// We can see that 28 is the first triangle number to have over five divisors.
/// What is the value of the first triangle number to have over five hundred divisors?

// Value, counter
struct IntegerSum(usize, usize);

impl IntegerSum {
    fn new() -> Self {
        Self(0, 1)
    }
}

impl Iterator for IntegerSum {
    type Item = usize;

    fn next(&mut self) -> Option<Self::Item> {
        self.0 += self.1;
        self.1 += 1;
        Some(self.0)
    }
}

fn num_of_divisors(n: usize) -> usize {
    let mut total = 0;

    for i in 1..((n as f64).powf(0.5) + 1.0) as usize {
        if n % i == 0 {
            total += 2;
        }
    }
    total
}

fn main() {
    let mut num = IntegerSum::new().skip_while(|sum| num_of_divisors(*sum) <= 500).next().unwrap();

    println!("{}", num);
}
